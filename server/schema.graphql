### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Comment {
  Tweet: Tweet
  User: User
  content: String
  createdAt: DateTime!
  id: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LikedTweet {
  id: Int!
  likedAt: DateTime!
  tweet: Tweet
  user: User
}

type Mutation {
  createComment(content: String, id: Int): Comment
  createProfile(avatar: String, bio: String, location: String, website: String): Profile
  createTweet(content: String): Tweet
  deleteLike(id: Int): LikedTweet
  likeTweet(id: Int): LikedTweet
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  updateProfile(avatar: String, bio: String, id: Int, location: String, website: String): Profile
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Profile {
  avatar: String
  bio: String
  createdAt: DateTime!
  id: Int!
  location: String
  user: User
  website: String
}

type Query {
  feed(orderBy: PostOrderByUpdatedAtInput, searchString: String, skip: Int, take: Int): [Post!]!
  likesNumber(id: Int): [LikedTweet]
  me: User
  tweets: [Tweet]
  users: [User]
}

enum SortOrder {
  asc
  desc
}

type Tweet {
  author: User
  comments: [Comment]
  content: String
  createdAt: DateTime!
  id: Int!
  likes: [LikedTweet]
}

type User {
  comments: [Comment]
  email: String!
  id: Int!
  likedTweets: [LikedTweet]
  name: String
  posts: [Post!]!
  profile: Profile
  tweets: [Tweet]
}

input UserCreateInput {
  email: String!
  name: String
  posts: [PostCreateInput!]
}

input UserUniqueInput {
  email: String
  id: Int
}
